// <auto-generated />
using System;
using CleanArchFramework.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchFramework.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PersistenceDbContext))]
    [Migration("20240322153529_Init-AddNewProductFields")]
    partial class InitAddNewProductFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CategoryPost");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InfoTextId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SubtitleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TitleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("InfoTextId");

                    b.HasIndex("SubtitleId");

                    b.HasIndex("TitleId");

                    b.ToTable("About");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ProfileBackgroundId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Social")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UICulture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ProfileBackgroundId");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NameId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("ImageId");

                    b.HasIndex("NameId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkTo")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.FileCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NameId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("ImageId");

                    b.HasIndex("NameId");

                    b.ToTable("FileCategory");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.FileSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("FileSet");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.FileStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alt")
                        .HasColumnType("text");

                    b.Property<int?>("FileCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FileGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FileSetId")
                        .HasColumnType("uuid");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileCategoryId");

                    b.HasIndex("FileSetId");

                    b.HasIndex("LanguageId");

                    b.ToTable("FileStorage");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Localization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<Guid>("LocalizationSetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocalizationSetId");

                    b.ToTable("Localization");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.LocalizationSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("LocalizationSet");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FinalTotal")
                        .HasColumnType("numeric");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("OrderedById")
                        .HasColumnType("text");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderedById");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccessoriesProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FinalTotal")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Sleeve")
                        .HasColumnType("text");

                    b.Property<Guid?>("SleeveProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("SparePart")
                        .HasColumnType("text");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.Property<string>("Valve")
                        .HasColumnType("text");

                    b.Property<Guid?>("ValveProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccessoriesProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SleeveProductId");

                    b.HasIndex("ValveProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("DescriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NameId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("NameId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.PinchValveSleeve", b =>
                {
                    b.Property<Guid>("PinchValveId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SleeveId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("PinchValveId", "SleeveId", "Version");

                    b.HasIndex("SleeveId");

                    b.ToTable("PinchValveSleeve");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<string>("Keywords")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NameId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("ImageId");

                    b.HasIndex("NameId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConnectionMaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectionType")
                        .HasColumnType("text");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Dimensions")
                        .HasColumnType("text");

                    b.Property<Guid?>("FilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HeadingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HousingId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImagesId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IndustriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NominalWidth")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Quality")
                        .HasColumnType("text");

                    b.Property<Guid?>("ScrewsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Series")
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<Guid?>("SuitableForId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionMaterialId");

                    b.HasIndex("ContentId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("FilesId");

                    b.HasIndex("HeadingId");

                    b.HasIndex("HousingId");

                    b.HasIndex("ImagesId");

                    b.HasIndex("IndustriesId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ScrewsId");

                    b.HasIndex("SuitableForId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DescriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NameId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("ImageId");

                    b.HasIndex("NameId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.SiteSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowComments")
                        .HasColumnType("boolean");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefaultLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EnableShoppingCart")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMaintenanceMode")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PostsPerPage")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowSearchBar")
                        .HasColumnType("boolean");

                    b.Property<string>("SiteDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SiteTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThemeColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<Guid>("PostsId")
                        .HasColumnType("uuid");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("ProductProductCategory", b =>
                {
                    b.Property<int>("ProductCategoriesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductCategoriesId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductProductCategory");
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.About", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.FileSet", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "InfoText")
                        .WithMany()
                        .HasForeignKey("InfoTextId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Subtitle")
                        .WithMany()
                        .HasForeignKey("SubtitleId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.Navigation("Image");

                    b.Navigation("InfoText");

                    b.Navigation("Subtitle");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.FileStorage", "ProfileBackground")
                        .WithMany()
                        .HasForeignKey("ProfileBackgroundId");

                    b.HasOne("CleanArchFramework.Domain.Entities.FileStorage", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId");

                    b.Navigation("ProfileBackground");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Category", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.FileSet", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("Description");

                    b.Navigation("Image");

                    b.Navigation("Name");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Faq", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.FileCategory", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.FileSet", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("Image");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.FileSet", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.Language", null)
                        .WithMany("FileSets")
                        .HasForeignKey("LanguageId");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.FileStorage", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.FileCategory", "FileCategory")
                        .WithMany()
                        .HasForeignKey("FileCategoryId");

                    b.HasOne("CleanArchFramework.Domain.Entities.FileSet", "FileSet")
                        .WithMany("Files")
                        .HasForeignKey("FileSetId");

                    b.HasOne("CleanArchFramework.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileCategory");

                    b.Navigation("FileSet");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Localization", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.Language", "Language")
                        .WithMany("Localizations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "LocalizationSet")
                        .WithMany("Localizations")
                        .HasForeignKey("LocalizationSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LocalizationSet");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Menu", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.Menu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Order", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.ApplicationUser", "OrderedBy")
                        .WithMany()
                        .HasForeignKey("OrderedById");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderedBy");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.Product", "AccessoriesProduct")
                        .WithMany()
                        .HasForeignKey("AccessoriesProductId");

                    b.HasOne("CleanArchFramework.Domain.Entities.Order", null)
                        .WithMany("OrderedItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("CleanArchFramework.Domain.Entities.Product", "SleeveProduct")
                        .WithMany()
                        .HasForeignKey("SleeveProductId");

                    b.HasOne("CleanArchFramework.Domain.Entities.Product", "ValveProduct")
                        .WithMany()
                        .HasForeignKey("ValveProductId");

                    b.Navigation("AccessoriesProduct");

                    b.Navigation("SleeveProduct");

                    b.Navigation("ValveProduct");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.OrderStatus", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.PinchValveSleeve", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.Product", "PinchValve")
                        .WithMany("PinchValves")
                        .HasForeignKey("PinchValveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.Product", "Sleeve")
                        .WithMany("Sleeves")
                        .HasForeignKey("SleeveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PinchValve");

                    b.Navigation("Sleeve");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Post", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("CleanArchFramework.Domain.Entities.FileSet", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Description");

                    b.Navigation("Image");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Product", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "ConnectionMaterial")
                        .WithMany()
                        .HasForeignKey("ConnectionMaterialId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("CleanArchFramework.Domain.Entities.FileSet", "Files")
                        .WithMany()
                        .HasForeignKey("FilesId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Heading")
                        .WithMany()
                        .HasForeignKey("HeadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Housing")
                        .WithMany()
                        .HasForeignKey("HousingId");

                    b.HasOne("CleanArchFramework.Domain.Entities.FileSet", "Images")
                        .WithMany()
                        .HasForeignKey("ImagesId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Industries")
                        .WithMany()
                        .HasForeignKey("IndustriesId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Screws")
                        .WithMany()
                        .HasForeignKey("ScrewsId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "SuitableFor")
                        .WithMany()
                        .HasForeignKey("SuitableForId");

                    b.Navigation("ConnectionMaterial");

                    b.Navigation("Content");

                    b.Navigation("Description");

                    b.Navigation("Files");

                    b.Navigation("Heading");

                    b.Navigation("Housing");

                    b.Navigation("Images");

                    b.Navigation("Industries");

                    b.Navigation("Material");

                    b.Navigation("Screws");

                    b.Navigation("SuitableFor");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.FileSet", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("CleanArchFramework.Domain.Entities.LocalizationSet", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("Image");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductCategory", b =>
                {
                    b.HasOne("CleanArchFramework.Domain.Entities.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("ProductCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchFramework.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.FileSet", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Language", b =>
                {
                    b.Navigation("FileSets");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.LocalizationSet", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderedItems");
                });

            modelBuilder.Entity("CleanArchFramework.Domain.Entities.Product", b =>
                {
                    b.Navigation("PinchValves");

                    b.Navigation("Sleeves");
                });
#pragma warning restore 612, 618
        }
    }
}
